---
format:
  revealjs:
    theme: serif
slide-format: revealjs
title:  Dictionaries
author:  Jon Reades
---


> A Python dictionary is just like a real dictionary: you can find things (values) using a word (key) instead of having to read the whole book. So: key ![m](mi_arrow_forward) value.


::: {.notes}

What advantages might this have over a list? 

:::

## How Does it Work?

The key can be *almost* anything—an integer, a string, a variable...—that is *unique* in the dictionary and **immutable**. 

A list is not immutable, so you can't use a list as a dictionary key.


::: {.notes}

Again, just like a real dictionary: you don't have multiple entries for 'dog', otherwise the dictionary wouldn't *work*. You might have multiple definitions: which is to say, the key might return multiple values.

:::

---

:::: {.columns}
::: {.column width="50%"}

### List
```python
stuff = [
  'San Francisco',
  'USA',
  837442]
  
# Population:
print(stuff[2]) 
```

:::
::: {.column width="50%"}
### Dict
```python
stuff = {
  'city': 'San Francisco',
  'country': 'USA',
  'pop': 837442}

# Population
print(stuff['pop'])
```
:::
::::

::: {.notes}

Technically, we get the same answer from both of these and you will get the answer slightly faster from the list; so why might we prefer the dictionary?

1. Dicts are **created** using: `d = { key: value, key: value }`

2. Dicts are **accessed** using: `d[key]`

So the only difference between lists and dicts is: `[...]` and `{...}` when they are created.

:::

---

:::: {.columns}
::: {.column width="50%"}

### List

| index | value |
| :---- | :---- |
| 0 | San Francisco |
| 1 | London |
| 2 | Paris |
| 3 | Beijing|

:::
::: {.column width="50%"}
### Dict

| key | value |
| :---- | -----: |
| San Francisco | 837442 |
| London | 8673713 |
| Paris | 2229621 |
| Beijing | 21700000 |

:::
::::

## Manipulating Dictionaries {.smaller}

```python
cities = {
  'San Francisco': 837442,
  'London': 8673713,
  'Paris': 2229621, 
  'Beijing': 21700000
}
c = 'Beijing'
print(f"The population of {c} is {cities['Beijing']}")
```

## Setting Values {.smaller}

It's the same process to update an existing value or create a new one:
```python
cities['Beijing'] = 21716620
cities['Toronto'] = 2930000

print(cities['Beijing'])
print(cities['Toronto'])
del cities['Toronto'] # Key is deleted immediately
cities.pop('Toronto',None) # Does not return error if key doesn't exist; returns None
```


## Getting Values {.smaller}

There are two ways to retrieve values from a dictionary:
1. `cities['Beijing']`
2. `cities.get('Beijing')`

Why have two? Consider:
```python
print(cities['Sao Paulo'])
> Traceback (most recent call last):
>  File "<stdin>", line 1, in <module>
> KeyError: 'Sao Paulo'
print(cities.get('Sao Paulo'))
> None
```



::: {.notes}

The first triggers an **error**, the second returns `None`. Errors _can_ be unfriendly: do you want your entire Python program to fail because a single city is missing, or would you rather than it did something a little more sensible such as... skipping the row?

:::

## Getting Values (cont'd) {.smaller}
```python
print(cities['Sao Paulo'])
> KeyError: ‘Sao Paulo’

c = cities.get('Sao Paulo')
if not c:
  print("Sorry, no city by that name.")
> "Sorry, no city by that name."
```


## Iterating {.smaller}

Similar to iterating over lists but... 

```python
for c in cities:
  print(c)
```
Prints:
```python
'San Francisco'
'London'
'Paris'
'Beijing'
'Toronto'
```



::: {.notes}

How would we print out the populations?

:::

---

:::: {.columns}
::: {.column width="50%"}

### Keys
```python
for k in cities.keys():
  print(k)
```

Prints:
```python
'San Francisco'
'London'
'Paris'
'Beijing'
'Toronto'
```

:::
::: {.column width="50%"}
### Values
```python
for v in cities.values():
  print(v)
```

Prints:
```python
837442
8673713
2229621
21716620
2930000
```

:::
::::

## Danger, Will Robinson!

> Dictionaries are **unordered** key/value pairs. There is no guarantee that things come out in the same order they went in! They **complement** ordered lists, they don't **replace** them!


## A Final Note! {.smaller}

> Keys can be **almost** anything, and so can values!

```python
cities = {
  'San Francisco': [37.77, -122.43, 'SFO']
}
```



::: {.notes}

What is this starting to look like?

:::

## And Also... {.smaller}

```python
cities = {
  'San Francisco': {
    'lat': 37.77,
    'lon': -122.43,
    'airport':'SFO'}
}
print(cities['San Francisco']['lat'])
```
This is *basically* what JSON is.


# One More Thing... {.smaller}

You may come across this:
```python
s = {1, 2, 3}
```
It _looks_ like a dictionary, but where are the keys? 
```python
type(s)
> <class 'set'>
```
A set is just a group of unique keys _without_ values attached. They have many uses!


::: {.notes}

It looks like a cross between a list and a dictionary because, conceptually for our purposes, that's not far from the truth.

Sets can be used, for instance, to generate categories from a column in a data set: we don't worry about what order the categories come in, we only care about them as _unique entries_ in the column!

:::

## Resources


- [Dictionaries and sets](https://www.linkedin.com/learning/python-data-analysis-2/dictionaries-and-sets)
- [Comprehensions](https://www.linkedin.com/learning/python-data-analysis-2/comprehensions)

# Thank you!