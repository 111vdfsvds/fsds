---
format:
  revealjs:
    theme: [serif, slides.scss]
author: "Jon Reades"
title: "Functions"
footer: "Functions • Jon Reades"
highlight-style: github
code-copy: true
code-line-numbers: true
slide-level: 2
title-slide-attributes:
  data-background-image: ../img/CASA_Logo_no_text.png
  data-background-size: cover
  data-background-position: center
  data-background-opacity: .17
logo: ../img/CASA_logo.png
history: false
css: slides.css
---
### Let's Get Lazy!





::: {.notes}

Why do any work you don't **need** to?

Functions allow us to ![](mi_sync)  code!

Bonus: they can make our code more **legible**.

:::


> Functions 'encapsulate' a task (they combine many instructions into a single line of code). Most programming languages provide many built-in functions that would otherwise require many steps to accomplish, for example computing the square root of a number. In general, **we don't care how a function does what it does**, **only that it 'does it'**! 


## What Does a Function Look Like?

> `len(my_list)` is a function.

So `len(...)` encapsulates the process of figuring out how long something with 'countable units' actually is, whether it’s a string or a list.




::: {.notes}

`len(123)` is a Type Error.

`len(‘123’)` is not.

![](mi_question_answer)  Can you think why?

:::

## So What Does a Function Look like? {.smaller}

All function 'calls' looking something like this:
```python
function_name(...)
```
Where the '`...`' are the inputs to the function; it could be one variable, 25 variables, a list, even another function! 

And if the function 'returns' something it will look like this:
```python
return_data = function_name(...)
```


---

:::: {.columns}
::: {.column width="50%"}

### As Code 
```python
data = [1,25,-4,14,7,9]
total = 0.0
count = len(data)
for i in data:
  total += i
mean = total/count
```

:::
::: {.column width="50%"}
### As Function
```python
def calc_mean(numbers):
  total = 0.0
  count = len(numbers)
  for i in numbers:
    total += i
  return total/count

data = [1,25,-4,14,7,9]
mean = calc_mean(data)
```

:::
::::

## In Action! {.smaller}

```python
def calc_mean(numbers):
  total = 0.0
  count = len(numbers)
  for i in numbers:
    total += i
  return total/count

data = [1,25,-4,14,7,9]
print(calc_mean(data))
> 8.666666666666666
data2 = [200000,2500000,-4,1400000,70,900000]
print(calc_mean(data2))
> 833344.3333333334
```


## But Notice! {.smaller}

```python
print(total)
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> NameError: name 'total' is not defined

print(numbers)
> Traceback (most recent call last):
>   File "<stdin>", line 1, in <module>
> NameError: name 'numbers' is not defined
```



## Simple Function {.smaller}

By 'simple' I don't mean *easy*, I mean it does *one* thing only:
```python
def hello():
  print("Hello world!")
```
We then run it with:
```python
hello()
```
And that produces:
```python
Hello world!
```


## Passing in Information {.smaller}

We can pass information _to_ a function if we tell the function what to expect:
```python
def hello(name: str):
  print(f"Hello {name}!")
```
Now we can do this:
```python
hello("new programmers")
> Hello new programmers!
```


## Getting Information Out  {.smaller}

Functions become more useful when we can also get information *out* of them!
```python
def hello(name: str) -> str:
  return "Hello " + name + "!"
```
Now the function does this:
```python
output = hello("new programmers")
print(output)
> Hello new programmers!
```


## Writing a Function {.smaller}

```python
def <function name>(<var. name>: <var. type>) -> <var. type>:
  ...
  return <var>
```
This can also be written:
```python
def <function name>(<var. name>):
  ...
  return <var>
```
Python is 'friendly' in the sense that all of the `<variable type>` information is optional, but it will help you (and Python) to know what you were **expecting** to happen.


## Complicating Things...  {.smaller}

```python
ds2 = {
  'lat':[51.51,40.71,35.69],
  'lon':[0.13,74.01,139.68],
  'tz': [+0,-5,+8],
  'name':['London','New York','Tokyo']
}

def get_city_info(data: dict, city: str, field: str, lookup: str='name') -> str:
  return str(data[field][ data[lookup].index(city) ])

city = 'New York'
print(f"The latitude of {city} is {get_city_info(ds2,'New York','lat')}")
> The latitude of New York is 40.71
```


# Any time you type the *same* code more than twice... *consider* a function!

## Resources {.smaller}


- [What is a function?](https://www.linkedin.com/learning/python-quick-start/what-is-a-function)
- [Python functions](https://www.linkedin.com/learning/learning-python-2/python-functions)
- [Built-in functions](https://www.linkedin.com/learning/python-quick-start/built-in-functions-in-python)
- [Define your own functions](https://www.linkedin.com/learning/python-quick-start/define-and-call-your-own-functions)
- [Types of functions](https://www.linkedin.com/learning/python-quick-start/types-of-functions)
- [Defining a function](https://www.linkedin.com/learning/python-essential-training-2/defining-a-function)
- [Function arguments](https://www.linkedin.com/learning/python-essential-training-2/function-arguments)
- [Argument lists](https://www.linkedin.com/learning/python-essential-training-2/argument-lists)
- [Keyword arguments](https://www.linkedin.com/learning/python-essential-training-2/keyword-arguments)
- [Return values](https://www.linkedin.com/learning/python-essential-training-2/return-values)
- [Decorators](https://www.linkedin.com/learning/python-essential-training-2/decorators)
- [Variable Scopes](https://realpython.com/python-namespaces-scope/)
- [Robust Python with Type Hints](https://towardsdatascience.com/robust-python-with-type-hints-a86632ff56cc)


# Thank you!