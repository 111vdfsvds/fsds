# Setting Up

:::{.callout-warning}
## Changes before 22/23

- [ ] Add Learning Outcomes for each week
- [ ] More time on Git/GitHub and pull/push/browsing version history; point to setting quantitative research questions (CASA0007 Week 1) but shift focus on to policy. Explain why there are two assessments and why one has group work with a peer component.
- [ ] Remove Docker installation practical from FSDS; keep in QM.
- [ ] Jon to create short video on *purpose* of Docker that can be used in QM and discussed in FSDS (as part of a data science ‘workflow’)
- [ ] Add discussion of .gitignore file to GitHub practical (and make sure they add .gz, .csv, and .zip!)
:::

This week is focussed on getting you set up for the rest of the course in terms of having the requisite software installed and accounts configured so that you can keep track of your work, write code, and track changes. However, you should _also_ see this as preparing the foundation not only for your remaining CASA modules (especially those in Term 2) but also for your post-MSc career: the ability to manage and version code (GitHub); collaborate around a shared codebase (GitHub+Markdown); and produce reproducible code (GitHub+Docker) is integral to modern software development and data science.

You should also see this session as connecting to _Quantitative Methods_ Week 1 content on 'setting quantitative research questions' since the [main assessment](assessments.qmd) will require you to develop a data-led policy briefing. In other words, you'll need to map current policy on to one or more research questions that can be quantitatively examined using the tools and techniques acquired over the course of the term! While you don't need to start work on this yet, you should keep it in the back of your mind for when you come across readings/results that you'd like to explore in more detail.


Although none of these activities are *compulsory* in advance of the first session, getting your computer set up to code *does* take time and most of these preparatory activites are fairly straightforward... with a few exceptions noted below. If you are able to get these tools installed in advance then you can focus on the taught content in the first two practicals rather than also wrestling with an installation process. This will also give us more time to help you if you discover that you're one of the unlucky few for whom getting set up is a lot more work!

## Computer Health Check-up

Please ensure that your computer is fully up-to-date with Operating System and application updates. Also, please make a note of the following three things:

- What Operating System and Version is your _main_ computer running? [Help for Windows](https://support.microsoft.com/en-gb/help/13443/windows-which-version-am-i-running). [Help for Mac](https://support.apple.com/en-gb/HT201260).
- How much RAM does your _main_ computer have? [Help for Windows](https://www.howtogeek.com/435644how-to-see-how-much-ram-is-in-your-pc-and-its-speed/). [Helpfor Mac](https://www.macworld.co.uk/how-to/mac/much-ram-need-more-3793418/).
- How much free disk space does your _main_ computer have? [Help for Windows](https://www.lifewire.com/how-to-check-free-hard-drive-space-in-windows-2619187). [Help for Mac](https://www.macworld.com/article/2972775/how-to-check-a-mac-free-hard-drive-space.html).

This information will be very useful during the first few weeks when you are most likely to encounter problems with the programming environment. *Generally* speaking, the things to watch out for are:

1. Your operating system is Windows 10 Home, or something older than Windows 10
(*e.g.* Windows 8 or ealier), or MacOS older than 10.13 (High Sierra).
2. Your computer has less than 8GB of RAM.
3. Your computer has less than 15GB of free disk space remaining.

## Installing Command Line Tools

Please try to install one of:

- **Mac:** the Xcode Command Line Tools, which can be done [directly from the Terminal](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/).
- **Windows:** WSL 2, for which you can follow [these instructions](https://www.digitalocean.com/community/tutorials/how-to-install-the-windows-subsystem-for-linux-2-on-microsoft-windows-10).

## Installing the Programming Environment

If you want to get ahead of things, then the single most important thing you can do is to install the programming environment. This is the stage where you're most likely to encounter problems that will need our assistance, so knowing that you need our help here means that you can ask for it much sooner in the practical!

Over the years, we have experimented with a range of approaches to setting you up with a programming environment: VirtualBox; Vagrant; Docker; and Anaconda Python directly. Each of these has pros and cons, but after careful consideration we have come to the conclusion that **Docker** is the most robust way to ensure a consistent experience in which all students end up with the same versions of each library, difficult-to-diagnose hardware/OS issues are minimised, and running/recovery is the most straightforward. 

Some students are unable to run Docker on their Windows machines, in which case **Anaconda Python** can be used with the configuration file that we provide. However, if your machine runs Docker then you **must** use Docker: this isolates the programming environment form your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every library that we are. Anaconda is only for emergencies.

__To install the Programming Environment follow the instructions in Practical 1 [here](https://github.com/jreades/fsds/blob/master/practicals/Practical-01-Getting_Started.ipynb)__ (Task 5, but 4 and 3 are recommended)

### Known issues

With Docker on Windows there is _sometimes_ an issue when closing down Docker because the files that you created are not saved and/or you cannot see any of the files on your _main_ system. If this happens to you, the please try replacing this part of the Docker command (detailed elsewhere):

`-v "$WORK_DIR":/home/jovyan/work`

with:

`--mount type=bind,source="$(pwd)",target=/home/jovyan/work`

This should enable you to see any existing files that you have, while also being able to save any files that you create in JupyterLab.

## Class

In this week's workshop we will review the module aims, learning outcomes, and expectations with a general introduction to the course.

## Learning Outcomes

N.B. Classmaterial and all other resources for this module are on Moodle.

## Practical

:::{.callout-warning}
## Changes before 22/23
- [ ] Add Learning Outcomes for each week
- [ ] Standardise delivery by TAs where practicals are TA-led (e.g. FSDS): clearer guidance on how to take students through each week.
- [ ] Clearer articulation of difficulty levels/targets for components *within* each week’s practicals.
- [ ] Make links between lecture and practical content explicit; ideally trace a question through the whole process (*e.g.* “If I wanted to know if and where blue plaques are clustered in London how would I find out?”)
:::

If you have already installed the programming environment then the practical can be downloaded from [GitHub](https://github.com/jreades/i2p/blob/master/practicals/Practical-01-Getting_Started.ipynb) (Click on `Raw` and then `Save File As...`) and viewed by saving it to your `Documents/CASA/...` folder, or you can just [view it online](https://github.com/jreades/i2p/blob/master/practicals/Practical-01-Getting_Started.ipynb) in your web browser since there is no actual coding this week.
