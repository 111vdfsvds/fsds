---
format:
  html:
    code-fold: true
#jupyter: python3
---
# Foundations (Pt. 1)

:::{.callout-warning}
## Changes before 22/23

- [ ] Add Learning Outcomes for each week
- [ ] More focus on code re-use and simplicity.
:::

## Overview

::: {.callout-important}
This week's learning objectives are:

1. A review of basic Python syntax.
2. A review of logical operators in Python.
3. A review of basic list operations.
4. An introduction to making use of Git+GitHub.
5. An introdution to make use of the Shell/Terminal.
6. An understanding of how none of this all that new.
::: 

This week we will be (briefly) reviewing the basics of Python with a view to recapping the more complex aspects of simple data structures. And yes, that's a bit of an oxymoron, but we're focussing here on how computers 'think' and how that differs from what you might be expecting as an intelligen human being! 

We will be contextualising all of this within the longer history of the study of geography through computation. I hope to convince you that many of the problems we face today are _not_ new and why that should encourage you to continue to do the readings!

## Lectures

As we're working in a 'flipped' environment, you should watch these videos *before* class  so that the 'live' workshop can focus on demonstration, discussion, and clarification. This week is very busy because we need to cover off the basics for those of you who were unable to engage with [Code Camp](https://kingsgeocomputation.org/teaching/code-camp/code-camp-python/), while recapping only the crucial bits for those of you who *were* able to do so.

Come to class prepared to present:

| Session | Video | Presentation | Notes |
| :------ | :---- | :----------- | :---- |
| Computers in Urban Studies |  | [Slides](../lectures/2.1-Computers_in_Planning_and_Geography.qmd) | [Notes]() |
| Principles of Programming |  | [Slides](../lectures/2.2-Principles_of_Programming.qmd) | [Notes]() |
| Python: the Basics | [Video](https://web.microsoftstream.com/video/dc5951ed-33fb-43a7-8e30-19ec2b41cb1f) | [Slides](../lectures/2.3-Python_the_Basics.qmd) | [Notes]() |
| Lists | [Video](https://web.microsoftstream.com/video/21ef45cf-c432-4882-be54-e9bdbdaf7a3b)  | [Slides](../lectures/2.4-Lists.qmd) | [Notes]() |
| Iteration| [Video](https://web.microsoftstream.com/video/ecbf2b2b-6d11-4df0-a28b-caed2badbea1) | [Slides](../lectures/2.5-Iteration.qmd) | [Notes]() |
| The Command Line | [Video](https://web.microsoftstream.com/video/5cd2a59c-ab53-4e75-a607-dd5de5e61681) | [Slides](../lectures/2.6-The_Command_Line.qmd) | [Notes]() |
| Getting Stuck Into Git | [Video](https://web.microsoftstream.com/video/aa0f7893-4fb5-4af1-ad44-af8e352f4d52) | [Slides](../lectures/2.7-Git.qmd) | [Notes]() |

### Readings

Come to class prepared to present:

- [@Burton:1963] [DOI](https://doi.org/10.1111/j.1541-0064.1963.tb00796.x)
- [@ArribasBel:2018] [DOI](https://doi.org/10.1111/gec3.12403)

### Activities

- Padlet: [Collaborative Agenda]
- Complete the [short Moodle quiz](https://moodle.ucl.ac.uk/mod/quiz/view.php?id=2388403) associated with this week's activities.

## Installing the Programming Environment

:::{.callout-warning}
This week's practical requires you to have completed installation of the programming environment. Make sure you have [completed setup of the environment](../setup/index.qmd).
:::

In principle, we fully support students who want to do things their own way: running their own Python installation, tweaking Docker... However, one thing to keep in mind is that there are more than 100 students taking this class, so we are *also* not able to sit down with each person and develop a custom learning environment.

The approach that we've developed is intended to hide some of the complexity of getting started with managing your own programming environment: we give you full access to the cutting-edge Python libraries and other tools needed to 'do' spatial data science, but with Docker only need to install 1 application, download 1 (big) file, and run 1 command. When it works... 

There *are* alternatives, such as installing everything using Anaconda Python's `conda` tool. But there are *more* things that can go wrong and they can go wrong in more complex ways. Solving the Anaconda environment can take over an hour _before_ it even starts installing. I've had `conda` fail on me after solving *all night*!

Similarly, we suggested a way to manage your files so that we had a starting point for trying to help you resolve challenges that you might be having with reading/writing files or pushing/pulling files to Git. Imagine what happens if each and every person puts their files in their _own_ place and then every one of the 100 students asks for help with _their_ setup. It will confuse everyone else (especially the people who are _already_ confused) and take up whole practicals!

So here's what we ask: if you know enough to know what to do with an Anaconda YAML file, or can work out how to edit the Dockerfile yourself and build a new image, then by all means knock yourself out! We are _not_ going to tell you that cannot do something, and eventually you _will_ need to learn to stand on your own two feet. But please do not expect us to support you individually if you've gone off and done your own thing and now 'it doesn't work'. OK? We'll offer advice (if we can) but only during Office Hours and only if no one else is waiting for help.

We hope that sounds fair.

## Practical

:::{.callout-important}
This week's learning objectives are:

1. 
2. 
4. 
:::

:::{.callout-warning}
## Changes before 22/23
- [ ] Add Learning Outcomes for each week
- [ ] Standardise delivery by TAs where practicals are TA-led (e.g. FSDS): clearer guidance on how to take students through each week.
- [ ] Clearer articulation of difficulty levels/targets for components *within* each week’s practicals.
- [ ] Make links between lecture and practical content explicit; ideally trace a question through the whole process (*e.g.* “If I wanted to know if and where blue plaques are clustered in London how would I find out?”)
:::

The practical can be [downloaded from GitHub](https://github.com/jreades/fsds/raw/master/practicals/Practical-02-Foundations_1.ipynb).

## References
